[project]
name = "final_challenge"
version = "0.0.0"
description = ""
authors = []
readme = "README.md"
requires-python = ">=3.10, <3.11"
dynamic = ["dependencies"]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.dependencies]
python = ">=3.10, <3.11"

better-exceptions = "^0.3.3"
ipython = "^8"

jsonpickle = "^4.0.5"
matplotlib = "^3.10.1"
numpy = "==1.*"
opencv-python = "^4.11.0.86"
# rosbags = "^0.10.9"
rosbags = { git = "https://github.com/rss2025-4/rosbags.git" }
scikit-learn = "^1.6.1"
scipy = "^1.15.2"
tqdm = "^4.67.1"

# neccessary for ros
catkin-pkg = "^1.0.0"
lark = "^1.2.2"
pyyaml = "^6.0.2"

torch = [
  { version = "^2.7.0", markers = "extra != 'gpu'", source = "pytorch-cpu" },
  { version = "^2.7.0", markers = "extra == 'gpu'", source = "PyPI" },
]

sam-2 = { git = "https://github.com/facebookresearch/sam2.git", optional = true }
jax = { version = "^0.6.0", optional = true }
equinox = { version = "^0.12.1", optional = true }

# libracecar = { git = "https://github.com/rss2025-4/libracecar.git", optional = true }
libracecar = { path = "/home/alan/6.4200/libracecar/", develop = true, optional = true }


[tool.poetry.extras]
jax = [
  #
  "equinox",
  "jax",
  "libracecar",
]
gpu = [
  #
  "equinox",
  "jax",
  "libracecar",
  "sam-2",
]

[tool.poetry.group.dev.dependencies]
autoflake = "^2.3.1"
basedpyright = "^1.29.1"
black = "^25.1.0"
isort = "^6.0.1"

[tool.poetry.group.docs.dependencies]
rstfmt = "^0.0.14"
sphinx = "^8"
sphinx-rtd-theme = "^3.0.2"
sphinxcontrib-restbuilder = "^0.3"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"

[tool.black]
line-length = 100
exclude = '''
/(
      data
    | paul
    | shrinkray_heist
)/
'''

[tool.isort]
profile = "black"
combine_as_imports = true
known_first_party = [
  #
  "libracecar",
]
skip = [
  #
  "data",
  "final_challenge/paul",
  "shrinkray_heist",
]

[tool.pyright]
exclude = ["**/result*"]
typeCheckingMode = "basic"
reportPrivateImportUsage = false
