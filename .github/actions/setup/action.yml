name: "setup"

inputs:
  PROJECT_DIR:
    required: true
  POETRY_GROUPS:
    required: true

runs:
  using: "composite"
  steps:
    # https://github.com/marketplace/actions/install-poetry-action
    #----------------------------------------------
    #       check-out repo and set-up python
    #----------------------------------------------
    - name: Check out repository
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.PROJECT_DIR }}

    - uses: actions/checkout@v4
      with:
        repository: Sebastian-Garcia/racecar_simulator
        ref: 0e20c77dcc408c7b4babf153ef3baeadf5448ce8
        path: src/racecar_simulator

    - name: build ros workspace
      # make .ros/log, otherwise launch later causes
      # failed to initialize logging: Failed to create log directory:
      # /github/home/.ros/log, at ./src/rcl_logging_spdlog.cpp:90
      run: |
        mkdir -p $HOME/.ros/log
        set +eux
        source /etc/bash.bashrc
        set -eux
        colcon build --symlink-install
      shell: bash

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: ${{ inputs.PROJECT_DIR }}/.venv
        installer-parallel: true

    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: ${{ inputs.PROJECT_DIR }}/.venv
        key: venv-racecardocker-${{ hashFiles('**/poetry.lock') }}

    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --only ${{ inputs.POETRY_GROUPS }}
      working-directory: ${{ inputs.PROJECT_DIR }}
      shell: bash

    #----------------------------------------------
    # install your root project, if required
    #----------------------------------------------
    - name: Install project
      run: poetry install --no-interaction
      working-directory: ${{ inputs.PROJECT_DIR }}
      shell: bash
